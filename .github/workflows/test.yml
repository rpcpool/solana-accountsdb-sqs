concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
  push:
    branches:
      - 'master'
      - 'v1.16'
      - 'v1.17'
      - 'v1.18'
      - 'v2.0'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
    runs-on: ["${{ matrix.os }}"]

    steps:
      - uses: actions/checkout@v4

      - name: Set rust version
        run: |
          RUST_VERSION="$(grep -oP 'channel = "\K\d\.\d+\.\d+(?=")' rust-toolchain.toml)"
          echo "RUST_STABLE_VERSION=$RUST_VERSION" >> "$GITHUB_ENV"

      - name: Set env vars
        run: |
          source ci/env.sh
          echo "GEYSER_PLUGIN_NAME=$plugin_name" | tee -a $GITHUB_ENV
          echo "GEYSER_PLUGIN_LIB=lib${plugin_lib_name}" | tee -a $GITHUB_ENV

      - if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev libssl-dev libsasl2-dev libzstd-dev

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./target
          key: cargo-${{ matrix.os }}-${{ hashFiles('rust-toolchain.toml') }}-${{ hashFiles('**/Cargo.lock') }}-0000
          restore-keys: |
            cargo-${{ matrix.os }}-${{ hashFiles('rust-toolchain.toml') }}

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_STABLE_VERSION }}
          components: clippy

      - name: cargo tree
        run: |
          cargo tree
          git checkout Cargo.lock
          cargo tree --frozen --offline

      - name: Run fmt
        run: cargo +nightly fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets -- -Dwarnings

      - name: Build
        run: ./ci/cargo-build-test.sh
